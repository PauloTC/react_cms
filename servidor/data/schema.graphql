 type Cliente {
        id: ID
        nombre: String
        apellido: String
        empresa: String
        edad: Int
        tipo: TipoCliente
        pedidos: [Pedido]
        emails:  [Email]
    }

    type Pedido {
        producto: String
        precio: Int
    }
    type Email {
        email: String
    }

    type Producto {
        id: ID
        nombre:  String!
        precio: Int!
        stock: Int!
    }

    type Query {
        getClientes( limite : Int , offset: Int ) : [Cliente]
        getCliente( id: ID ) :  Cliente
        totalClientes: String

        # productos
        obtenerProductos(  limite: Int, offset: Int  ) : [Producto]

    }

    enum TipoCliente {
        BASICO
        PREMIUM
    }

    input PedidoInput {
        producto: String
        precio: Int
    }

    input EmailInput {
        email: String
    }

    input ClienteInput {
        id: ID
        nombre: String!
        apellido: String!
        empresa: String!
        edad: Int!
        tipo: TipoCliente!
        pedidos: [PedidoInput]
        emails:  [ EmailInput]
    }

    input ProductoInput {
        id: ID,
        nombre:  String!
        precio: Int!
        stock: Int!
    }

    type Mutation {
        crearCliente( input: ClienteInput ) : Cliente
        actualizarCliente( input: ClienteInput ) : Cliente
        eliminarCliente( id: ID! ) : String 
        # productos
        nuevoProducto(input: ProductoInput) : Producto
    }