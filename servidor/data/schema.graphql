 type Cliente {
    id: ID
    nombre: String
    apellido: String
    empresa: String
    edad: Int
    tipo: TipoCliente
    emails:  [Email]
}
type Email {
    email: String
}
type Pedido {
    id: ID
    pedido : [PedidoProducto]
    total: Int
    fecha: String
    cliente: ID
    estado: TipoPedido
}
type PedidoProducto {
    id: ID,
    cantidad: Int
}

type Producto {
    id: ID
    nombre:  String!
    precio: Int!
    stock: Int!
}

type Query {
    getClientes( limite : Int , offset: Int ) : [Cliente]
    getCliente( id: ID ) :  Cliente
    totalClientes: String

    # productos
    obtenerProductos(  limite: Int, offset: Int, stock: Boolean  ) : [Producto]
    obtenerProducto(  id:ID ) : Producto
    totalProductos: String
}

enum TipoCliente {
    BASICO
    PREMIUM
}
enum TipoPedido {
    PENDIENTE
    COMPLETADO
    CANCELADO
}
input EmailInput {
    email: String
}
input ClienteInput {
    id: ID
    nombre: String!
    apellido: String!
    empresa: String!
    edad: Int!
    tipo: TipoCliente!
    pedidos: [PedidoInput]
    emails:  [ EmailInput]
}

input ProductoInput {
    id: ID
    nombre:  String!
    precio: Int!
    stock: Int!
}

input PedidoInput {
    id: ID
    pedido : [PedidoProductoInput]
    total: Int
    fecha: String
    cliente: ID
    estado: TipoPedido
}
input PedidoProductoInput {
    id: ID,
    cantidad: Int
}

type Mutation {
    crearCliente( input: ClienteInput ) : Cliente
    actualizarCliente( input: ClienteInput ) : Cliente
    eliminarCliente( id: ID! ) : String 
    # productos
    nuevoProducto(input: ProductoInput) : Producto
    actualizarProducto( input: ProductoInput) : Producto
    eliminarProducto( id:ID! ) : String
    # pedidos
    nuevoPedido( input: PedidoInput ) : Pedido
}